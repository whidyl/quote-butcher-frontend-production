{"version":3,"sources":["components/Footer.js","components/Quote.js","components/CenterContent.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","author","showButchered","setShowButchered","newQuote","reButcher","loadingRebutcher","loadingQuote","ToggleButtonGroup","type","name","defaultValue","style","float","marginLeft","onChange","val","ToggleButton","variant","size","value","checked","Button","onClick","disabled","color","Quote","quote","marginBottom","textShadow","CenterContent","useState","setQuote","butchered","setButchered","setAuthor","initialLoaded","setInitialLoaded","setLoadingQuote","setLoadingRebutcher","useEffect","getNewButcheredQuote","fetch","mode","then","res","json","result","CSSTransition","in","timeout","classNames","appear","position","display","flexDirection","top","left","transform","method","headers","body","JSON","stringify","data","App","Math","ceil","random","toString","videoFile","className","autoPlay","muted","loop","objectFit","width","height","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fbb84c3.chunk.js","sourcesContent":["import React from 'react'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport Button from 'react-bootstrap/Button'\n\nconst Footer = ({author, showButchered, setShowButchered, newQuote, reButcher, loadingRebutcher, loadingQuote}) => {\n    const handleButcheredChange = (val) => {\n        setShowButchered(val)\n    }\n    return (\n        <div>\n            <ToggleButtonGroup type=\"radio\" name=\"butchergroup\" defaultValue={true} style={{float:\"left\", marginLeft: \"20px\"}} onChange={handleButcheredChange}>\n                <ToggleButton variant=\"outline-light\" size=\"sm\" value={true} checked={showButchered} >\n                    Butchered\n                </ToggleButton>\n                <ToggleButton variant=\"outline-light\" size=\"sm\" value={false} checked={!showButchered}>\n                    Original\n                </ToggleButton>\n            </ToggleButtonGroup>\n            <Button variant=\"outline-light\" style={{float: \"left\", marginLeft: \"20px\"}} size=\"sm\" onClick={() => {reButcher()}} disabled={loadingRebutcher}>\n                {loadingRebutcher ? \"loading... \" : \"Re-Butcher\"}\n            </Button>\n            <Button variant=\"outline-light\" style={{float: \"left\", marginLeft: \"20px\"}} size=\"sm\" onClick={() => {newQuote()}} disabled={loadingQuote}>\n                {loadingQuote ? \"loading... \" : \"New Quote\"}\n            </Button>\n            \n            <h3 style={{float: \"right\", color:\"white\"}}> ~ {author}</h3>\n        </div>\n\n    )\n}\n\nexport default Footer\n","import React from 'react'\n\nconst Quote = ({quote}) => {\n    return (\n        <div style={{marginBottom: \"20px\", textShadow: \"-3px 3px 7px rgba(0,0,0,0.47)\"}}>\n            <h2 style={{color: \"white\"}}>\"{quote}\"</h2>\n        </div>\n    )\n}\n\nexport default Quote\n","import React, { useState, useEffect } from 'react'\nimport Footer from './Footer'\nimport Quote from './Quote'\nimport { CSSTransition } from 'react-transition-group'\n\n\nconst CenterContent = () => {\n    const [quote, setQuote] = useState(\"\")\n    const [butchered, setButchered] = useState(\"\")\n    const [author, setAuthor] = useState(\"\")\n    const [showButchered, setShowButchered] = useState(true)\n    const [initialLoaded, setInitialLoaded] = useState(false)\n    const [loadingQuote, setLoadingQuote] = useState(false)\n    const [loadingRebutcher, setLoadingRebutcher] = useState(false)\n\n    useEffect(() => {\n        getNewButcheredQuote()\n    }, [])\n\n    const getNewButcheredQuote = () => {\n        setLoadingQuote(true)\n        fetch(\"https://quote-butcher-api.herokuapp.com/\", {\n            mode: 'cors',\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setQuote(result.quote);\n                    setButchered(result.butchered);\n                    setAuthor(result.author);\n                    setInitialLoaded(true);\n                    setLoadingQuote(false);\n                }\n            )\n    }\n\n    const reButcher = () => {\n        setLoadingRebutcher(true)\n        fetch(\"https://quote-butcher-api.herokuapp.com/\", {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json',\n            },\n            mode: 'cors',\n            body: JSON.stringify({quote: quote})\n        })\n            .then(res => res.json())\n            .then(data => {\n                    setButchered(data.butchered);\n                    setLoadingRebutcher(false);\n                }\n            )\n\n    }\n\n    return (\n        <CSSTransition in={!initialLoaded} timeout={1000} classNames=\"load\" appear>\n            <div style={{\n                position: \"fixed\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -50%)\",\n                textShadow: \"-3px 3px 7px rgba(0,0,0,0.47)\"}}\n                \n            >\n                \n                <Quote key={1} quote={showButchered ? butchered : quote}/>\n                <Footer key={2} author={author} \n                                showButchered={showButchered} \n                                setShowButchered={setShowButchered} \n                                newQuote={getNewButcheredQuote} \n                                reButcher={reButcher}\n                                loadingRebutcher={loadingRebutcher}\n                                loadingQuote={loadingQuote}/>\n            \n            </div>\n        </CSSTransition>\n    )\n}\n\nexport default CenterContent\n","import { useState } from 'react';\nimport CenterContent from './components/CenterContent';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  const [videoFile] = useState(\"/videos/\" + Math.ceil(Math.random()*10).toString() + \".mp4\")\n\n  return (\n    <div className=\"App\">\n      <video autoPlay muted loop style={{\n                objectFit: \"cover\",\n                width: \"100vw\",\n                height: \"100vh\",\n                position: \"fixed\",\n                top: \"0\",\n                left: \"0\"}}> \n            <source src={videoFile} type=\"video/mp4\"/>\n            Your browser does not support HTML5 video.\n      </video>\n      <CenterContent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}